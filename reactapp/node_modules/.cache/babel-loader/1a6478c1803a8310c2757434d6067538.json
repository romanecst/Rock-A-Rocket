{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/romanecastera/lacapsule/rockarocket/reactapp/src/Pages/Pay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\nimport { set } from 'mongoose';\nimport { connect } from 'react-redux';\nconst stripePromise = loadStripe('pk_test_51HfQFACHHl93Y5PiikCQkm8axeZ7jnK9A00dlk15nvLMz29O2p2hU6mAhD0fBqAdnMukCTa5rIJlgiHHgAxBQLF200UoWuTYvv');\n\nfunction Checkout(props) {\n  _s();\n\n  const [redir, setRedir] = useState( /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 38\n  }, this));\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    async function checkUser() {\n      if (props.token) {\n        const data = await fetch('/user', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: `token=${props.token}`\n        });\n        const body = await data.json();\n        console.log(body);\n        setUsername(body.user.username);\n        setEmail(body.user.email);\n      }\n    }\n\n    checkUser();\n  }, []);\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n      const data = await fetch('/addTrip', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `token=${props.token}`\n      });\n      const body = await data.json();\n      setRedir( /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/trips\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 16\n      }, this)); //   const stripe = await stripePromise;\n      // // Call your backend to create the Checkout Session\n      // const response = await fetch('/create-checkout-session', { method: 'POST' });\n      // const session = await response.json();\n      // // When the customer clicks on the button, redirect them to Checkout.\n      // const result = await stripe.redirectToCheckout({\n      //   sessionId: session.id,\n      // });\n      // if (result.error) {\n      // If `redirectToCheckout` fails due to a browser or network\n      // error, display the localized error message to your customer\n      // using `result.error.message`.\n      // }\n    }\n  };\n\n  const CARD_OPTIONS = {\n    iconStyle: 'solid',\n    style: {\n      base: {\n        iconColor: '#0275d8',\n        color: 'black',\n        fontWeight: 500,\n        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n        fontSize: '18px',\n        fontSmoothing: 'antialiased',\n        ':-webkit-autofill': {\n          color: '#fce883'\n        },\n        '::placeholder': {\n          color: '#0275d8'\n        }\n      },\n      invalid: {\n        iconColor: '#d9534f',\n        color: '#d9534f'\n      }\n    }\n  };\n\n  if (!success) {\n    var modal = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: 18,\n          color: '#0275d8'\n        },\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setUsername(e.target.value),\n        value: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: 18,\n          color: '#0275d8',\n          paddingTop: 5\n        },\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setEmail(e.target.value),\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n        options: CARD_OPTIONS\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: !stripe,\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: 13,\n          cursor: 'pointer',\n          color: '#0275d8',\n          marginTop: 20\n        },\n        onClick: () => setRedir( /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/sign\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 102\n        }, this)),\n        children: \"Sign in/ Sign up here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true);\n  } else {\n    var modal = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center\",\n      style: {\n        fontSize: 18,\n        color: '#0275d8'\n      },\n      children: \"Payment Successful!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: redir\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 8\n  }, this);\n}\n\n_s(Checkout, \"SHuCOZY+8COB8NkboIiV/zfZSB4=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Checkout;\n;\n\nfunction Pay(props) {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripePromise,\n    children: /*#__PURE__*/_jsxDEV(Checkout, {\n      token: props.token\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Pay;\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token\n  };\n}\n\nexport default connect(mapStateToProps, null)(Pay);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Checkout\");\n$RefreshReg$(_c2, \"Pay\");","map":{"version":3,"sources":["/Users/romanecastera/lacapsule/rockarocket/reactapp/src/Pages/Pay.js"],"names":["React","useState","useEffect","Elements","CardElement","useStripe","useElements","loadStripe","Button","InputGroup","InputGroupAddon","InputGroupText","Input","Redirect","set","connect","stripePromise","Checkout","props","redir","setRedir","username","setUsername","email","setEmail","stripe","elements","checkUser","token","data","fetch","method","headers","body","json","console","log","user","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","CARD_OPTIONS","iconStyle","style","base","iconColor","color","fontWeight","fontFamily","fontSize","fontSmoothing","invalid","success","modal","e","target","value","paddingTop","cursor","marginTop","Pay","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport {Elements, CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\nimport {\n  Button,InputGroup, InputGroupAddon, InputGroupText, Input\n} from 'reactstrap';\n\nimport { Redirect } from 'react-router-dom';\nimport { set } from 'mongoose';\nimport {connect} from 'react-redux';\n\n\nconst stripePromise = loadStripe('pk_test_51HfQFACHHl93Y5PiikCQkm8axeZ7jnK9A00dlk15nvLMz29O2p2hU6mAhD0fBqAdnMukCTa5rIJlgiHHgAxBQLF200UoWuTYvv');\n\nfunction Checkout(props) {\n  const [redir, setRedir] = useState(<div/>);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n    const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(()=>{\n    async function checkUser(){\n    if(props.token){\n      const data = await fetch('/user', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n        body: `token=${props.token}`\n      })\n      const body = await data.json()\n      console.log(body);\n      setUsername(body.user.username);\n      setEmail(body.user.email);\n    }\n  }\n  checkUser()\n  },[])\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n      const data = await fetch('/addTrip', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n        body: `token=${props.token}`\n      })\n      const body = await data.json()\n\n      setRedir(<Redirect to='/trips'/>)\n    //   const stripe = await stripePromise;\n\n    // // Call your backend to create the Checkout Session\n    // const response = await fetch('/create-checkout-session', { method: 'POST' });\n\n    // const session = await response.json();\n\n    // // When the customer clicks on the button, redirect them to Checkout.\n    // const result = await stripe.redirectToCheckout({\n    //   sessionId: session.id,\n    // });\n\n    // if (result.error) {\n      // If `redirectToCheckout` fails due to a browser or network\n      // error, display the localized error message to your customer\n      // using `result.error.message`.\n    // }\n    }\n  };\n\n  const CARD_OPTIONS = {\n    iconStyle: 'solid',\n    style: {\n      base: {\n        \n        iconColor: '#0275d8',\n        color: 'black',\n        fontWeight: 500,\n        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n        fontSize: '18px',\n        fontSmoothing: 'antialiased',\n        ':-webkit-autofill': {color: '#fce883'},\n        '::placeholder': {color: '#0275d8'},\n      },\n      invalid: {\n        iconColor: '#d9534f',\n        color: '#d9534f',\n      },\n    },\n  };\n\n  if(!success){\n    var modal = <><p style={{fontSize: 18, color: '#0275d8'}}>Name</p>\n    <input type='text' onChange={(e)=>setUsername(e.target.value)} value={username}/>\n    <p style={{fontSize: 18, color: '#0275d8', paddingTop: 5}}>Email</p>\n    <input type='text' onChange={(e)=>setEmail(e.target.value)} value={email}/>\n  <CardElement options={CARD_OPTIONS}/>\n   <Button type=\"submit\" color='primary' disabled={!stripe}>\n       Pay\n   </Button>\n   <p style={{fontSize:13, cursor: 'pointer', color:'#0275d8', marginTop: 20}} onClick={()=>setRedir(<Redirect to='/sign'/>)}>Sign in/ Sign up here</p></>\n  }else{\n    var modal = <p className='text-center' style={{fontSize: 18, color: '#0275d8'}}>Payment Successful!</p>\n  }\n\n  return (\n       <form onSubmit={handleSubmit}>\n         \n        {redir}\n        </form>\n\n  );\n};\n\nfunction Pay(props) {\n  return (\n    <Elements stripe={stripePromise}>\n      <Checkout token={props.token}/>\n    </Elements>\n  );\n}\n\nfunction mapStateToProps(state){\n  return {token: state.token}\n}\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Pay);"]},"metadata":{},"sourceType":"module"}