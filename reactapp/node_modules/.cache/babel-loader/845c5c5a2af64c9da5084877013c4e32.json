{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/romanecastera/lacapsule/projets/rockarocket/src/Pages/Pay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nexport default function Pay() {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      options: {\n        style: {\n          base: {\n            fontSize: '16px',\n            color: '#424770',\n            '::placeholder': {\n              color: '#aab7c4'\n            }\n          },\n          invalid: {\n            color: '#9e2146'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 8\n  }, this);\n}\n\n_s(Pay, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Pay;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pay\");","map":{"version":3,"sources":["/Users/romanecastera/lacapsule/projets/rockarocket/src/Pages/Pay.js"],"names":["React","useState","useEffect","Elements","CardElement","useStripe","useElements","Pay","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","style","base","fontSize","color","invalid"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,SAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,SAA/B,EAA0CC,WAA1C,QAA4D,yBAA5D;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC1B,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACF,QAAMI,QAAQ,GAAGH,WAAW,EAA5B;;AAEA,QAAMI,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD,KARmC,CAUpC;AACA;AACA;;;AACA,UAAMI,WAAW,GAAGJ,QAAQ,CAACK,UAAT,CAAoBV,WAApB,CAApB,CAboC,CAepC;;AACA,UAAM;AAACW,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAyB,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAC9DC,MAAAA,IAAI,EAAE,MADwD;AAE9DC,MAAAA,IAAI,EAAEN;AAFwD,KAA3B,CAArC;;AAKA,QAAIE,KAAJ,EAAW;AACTK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,KAAvB;AACD,KAFD,MAEO;AACLK,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,aAA/B;AACD;AACF,GA1BD;;AA4BA,sBACK;AAAM,IAAA,QAAQ,EAAEN,YAAhB;AAAA,4BACA,QAAC,WAAD;AACK,MAAA,OAAO,EAAE;AACLY,QAAAA,KAAK,EAAE;AACPC,UAAAA,IAAI,EAAE;AACFC,YAAAA,QAAQ,EAAE,MADR;AAEFC,YAAAA,KAAK,EAAE,SAFL;AAGF,6BAAiB;AACjBA,cAAAA,KAAK,EAAE;AADU;AAHf,WADC;AAQPC,UAAAA,OAAO,EAAE;AACLD,YAAAA,KAAK,EAAE;AADF;AARF;AADF;AADd;AAAA;AAAA;AAAA;AAAA,YADA,eAiBC;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,CAACjB,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADL;AAuBD;;GAvDuBD,G;UACLF,S,EACAC,W;;;KAFKC,G;AAuDvB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport {Elements, CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\n\n\nexport default function Pay() {\n    const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  return (\n       <form onSubmit={handleSubmit}>\n       <CardElement\n            options={{\n                style: {\n                base: {\n                    fontSize: '16px',\n                    color: '#424770',\n                    '::placeholder': {\n                    color: '#aab7c4',\n                    },\n                },\n                invalid: {\n                    color: '#9e2146',\n                },\n                },\n            }}\n            />\n        <button type=\"submit\" disabled={!stripe}>\n            Pay\n        </button>\n        </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}