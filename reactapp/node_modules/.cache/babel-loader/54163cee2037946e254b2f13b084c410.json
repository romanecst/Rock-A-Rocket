{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/romanecastera/lacapsule/projets/rockarocket/src/Pages/Pay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nconst stripePromise = loadStripe('pk_test_51HfQFACHHl93Y5PiikCQkm8axeZ7jnK9A00dlk15nvLMz29O2p2hU6mAhD0fBqAdnMukCTa5rIJlgiHHgAxBQLF200UoWuTYvv');\n\nfunction Checkout() {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  const CARD_OPTIONS = {\n    iconStyle: 'solid',\n    style: {\n      base: {\n        iconColor: '#c4f0ff',\n        color: '#fff',\n        fontWeight: 500,\n        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n        fontSize: '18px',\n        fontSmoothing: 'antialiased',\n        ':-webkit-autofill': {\n          color: '#fce883'\n        },\n        '::placeholder': {\n          color: '#87bbfd'\n        }\n      },\n      invalid: {\n        iconColor: '#ffc7ee',\n        color: '#ffc7ee'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      options: CARD_OPTIONS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 8\n  }, this);\n}\n\n_s(Checkout, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Checkout;\n;\nexport default function Pay() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripePromise,\n    children: /*#__PURE__*/_jsxDEV(Checkout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Pay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Checkout\");\n$RefreshReg$(_c2, \"Pay\");","map":{"version":3,"sources":["/Users/romanecastera/lacapsule/projets/rockarocket/src/Pages/Pay.js"],"names":["React","useState","useEffect","Elements","CardElement","useStripe","useElements","loadStripe","Button","InputGroup","InputGroupAddon","InputGroupText","Input","stripePromise","Checkout","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","CARD_OPTIONS","iconStyle","style","base","iconColor","color","fontWeight","fontFamily","fontSize","fontSmoothing","invalid","Pay"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,SAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,SAA/B,EAA0CC,WAA1C,QAA4D,yBAA5D;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SACEC,MADF,EACSC,UADT,EACqBC,eADrB,EACsCC,cADtC,EACsDC,KADtD,QAEO,YAFP;AAKA,MAAMC,aAAa,GAAGN,UAAU,CAAC,6GAAD,CAAhC;;AAEA,SAASO,QAAT,GAAoB;AAAA;;AAChB,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACF,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;;AAEA,QAAMW,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD,KARmC,CAUpC;AACA;AACA;;;AACA,UAAMI,WAAW,GAAGJ,QAAQ,CAACK,UAAT,CAAoBjB,WAApB,CAApB,CAboC,CAepC;;AACA,UAAM;AAACkB,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAyB,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAC9DC,MAAAA,IAAI,EAAE,MADwD;AAE9DC,MAAAA,IAAI,EAAEN;AAFwD,KAA3B,CAArC;;AAKA,QAAIE,KAAJ,EAAW;AACTK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,KAAvB;AACD,KAFD,MAEO;AACLK,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,aAA/B;AACD;AACF,GA1BD;;AA4BA,QAAMM,YAAY,GAAG;AACnBC,IAAAA,SAAS,EAAE,OADQ;AAEnBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AACJC,QAAAA,SAAS,EAAE,SADP;AAEJC,QAAAA,KAAK,EAAE,MAFH;AAGJC,QAAAA,UAAU,EAAE,GAHR;AAIJC,QAAAA,UAAU,EAAE,yCAJR;AAKJC,QAAAA,QAAQ,EAAE,MALN;AAMJC,QAAAA,aAAa,EAAE,aANX;AAOJ,6BAAqB;AAACJ,UAAAA,KAAK,EAAE;AAAR,SAPjB;AAQJ,yBAAiB;AAACA,UAAAA,KAAK,EAAE;AAAR;AARb,OADD;AAWLK,MAAAA,OAAO,EAAE;AACPN,QAAAA,SAAS,EAAE,SADJ;AAEPC,QAAAA,KAAK,EAAE;AAFA;AAXJ;AAFY,GAArB;AAoBA,sBACK;AAAM,IAAA,QAAQ,EAAEjB,YAAhB;AAAA,4BACA,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEY;AAAtB;AAAA;AAAA;AAAA;AAAA,YADA,eAEC,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAE,CAACd,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADL;AAQD;;GA5DQD,Q;UACUT,S,EACAC,W;;;KAFVQ,Q;AA4DR;AAED,eAAe,SAAS0B,GAAT,GAAe;AAC5B,sBACE,QAAC,QAAD;AAAU,IAAA,MAAM,EAAE3B,aAAlB;AAAA,2BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;MANuB2B,G","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport {Elements, CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\nimport {\n  Button,InputGroup, InputGroupAddon, InputGroupText, Input\n} from 'reactstrap';\n\n\nconst stripePromise = loadStripe('pk_test_51HfQFACHHl93Y5PiikCQkm8axeZ7jnK9A00dlk15nvLMz29O2p2hU6mAhD0fBqAdnMukCTa5rIJlgiHHgAxBQLF200UoWuTYvv');\n\nfunction Checkout() {\n    const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n    const cardElement = elements.getElement(CardElement);\n\n    // Use your card Element with other Stripe.js APIs\n    const {error, paymentMethod} = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  const CARD_OPTIONS = {\n    iconStyle: 'solid',\n    style: {\n      base: {\n        iconColor: '#c4f0ff',\n        color: '#fff',\n        fontWeight: 500,\n        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n        fontSize: '18px',\n        fontSmoothing: 'antialiased',\n        ':-webkit-autofill': {color: '#fce883'},\n        '::placeholder': {color: '#87bbfd'},\n      },\n      invalid: {\n        iconColor: '#ffc7ee',\n        color: '#ffc7ee',\n      },\n    },\n  };\n\n  return (\n       <form onSubmit={handleSubmit}>\n       <CardElement options={CARD_OPTIONS}/>\n        <Button type=\"submit\" disabled={!stripe}>\n            Pay\n        </Button>\n        </form>\n  );\n};\n\nexport default function Pay() {\n  return (\n    <Elements stripe={stripePromise}>\n      <Checkout/>\n    </Elements>\n  );\n}"]},"metadata":{},"sourceType":"module"}