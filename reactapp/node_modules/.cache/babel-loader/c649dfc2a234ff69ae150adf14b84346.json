{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/romanecastera/lacapsule/projets/rockarocket/src/Pages/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport Navig from './Navig';\nexport default function Home() {\n  _s();\n\n  useEffect(() => {\n    if ('geolocation' in navigator) {\n      console.log('geolocation is available');\n    } else {\n      console.log('geolocation IS NOT available');\n    }\n\n    navigator.geolocation.getCurrentPosition(position => {\n      console.log(position.coords.latitude, position.coords.longitude);\n    });\n\n    const API = async () => {\n      var rawResponse = await fetch(\"https://forward-reverse-geocoding.p.rapidapi.com/v1/reverse?format=json&lon=-87.6244212&lat=41.8755616&accept-language=en&polygon_threshold=0.0\", {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-key\": \"eb71094070msh0f063c4534649bcp14ec8djsn9f81e1fd2c7b\",\n          \"x-rapidapi-host\": \"forward-reverse-geocoding.p.rapidapi.com\"\n        }\n      }).then(response => {\n        console.log('RAW RESPONSE', response);\n      }).catch(err => {\n        console.error(err);\n      });\n      var response = await rawResponse.json();\n      console.log('RESPONSE', response);\n    };\n\n    API();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Navig, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/romanecastera/lacapsule/projets/rockarocket/src/Pages/Map.js"],"names":["React","useState","useEffect","Button","InputGroup","InputGroupAddon","InputGroupText","Input","Navig","Home","navigator","console","log","geolocation","getCurrentPosition","position","coords","latitude","longitude","API","rawResponse","fetch","then","response","catch","err","error","json"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACIC,MADJ,EACWC,UADX,EACuBC,eADvB,EACwCC,cADxC,EACwDC,KADxD,QAES,YAFT;AAGA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3BP,EAAAA,SAAS,CAAC,MAAI;AACV,QAAG,iBAAiBQ,SAApB,EAA+B;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,KAFH,MAES;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD;;AACDF,IAAAA,SAAS,CAACG,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrDJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACC,MAAT,CAAgBC,QAA5B,EAAsCF,QAAQ,CAACC,MAAT,CAAgBE,SAAtD;AACD,KAFD;;AAGF,UAAMC,GAAG,GAAG,YAAU;AAClB,UAAIC,WAAW,GAAG,MAAMC,KAAK,CAAC,iJAAD,EAAoJ;AACjL,kBAAU,KADuK;AAEjL,mBAAW;AACP,4BAAkB,oDADX;AAEP,6BAAmB;AAFZ;AAFsK,OAApJ,CAAL,CAOvBC,IAPuB,CAOlBC,QAAQ,IAAI;AACdZ,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BW,QAA3B;AACH,OATuB,EAUvBC,KAVuB,CAUjBC,GAAG,IAAI;AACVd,QAAAA,OAAO,CAACe,KAAR,CAAcD,GAAd;AACH,OAZuB,CAAxB;AAaA,UAAIF,QAAQ,GAAG,MAAMH,WAAW,CAACO,IAAZ,EAArB;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBW,QAAvB;AACH,KAhBD;;AAiBAJ,IAAAA,GAAG;AACN,GA3BQ,EA2BP,EA3BO,CAAT;AA4BA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAlCuBV,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Button,InputGroup, InputGroupAddon, InputGroupText, Input,\n  } from 'reactstrap';\nimport Navig from './Navig';\n\nexport default function Home() {\n    useEffect(()=>{\n        if('geolocation' in navigator) {\n            console.log('geolocation is available');\n          } else {\n            console.log('geolocation IS NOT available');\n          }\n          navigator.geolocation.getCurrentPosition((position) => {\n            console.log(position.coords.latitude, position.coords.longitude);\n          });\n        const API = async()=> {\n            var rawResponse = await fetch(\"https://forward-reverse-geocoding.p.rapidapi.com/v1/reverse?format=json&lon=-87.6244212&lat=41.8755616&accept-language=en&polygon_threshold=0.0\", {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"eb71094070msh0f063c4534649bcp14ec8djsn9f81e1fd2c7b\",\n                \"x-rapidapi-host\": \"forward-reverse-geocoding.p.rapidapi.com\"\n            }\n            })\n            .then(response => {\n                console.log('RAW RESPONSE',response);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n            var response = await rawResponse.json();\n            console.log('RESPONSE',response)\n        }\n        API();\n    },[]);\n    return (\n        <div>\n            <Navig/>\n        </div>\n    )\n}\n      "]},"metadata":{},"sourceType":"module"}